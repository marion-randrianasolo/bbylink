/**
 * @file Test script pour v√©rifier le flow de nouvelle partie
 * @author BabyLink Team
 * @created 2025-01-10
 * 
 * Teste la cr√©ation d'une nouvelle partie avec le m√™me code
 */

// Configuration des URLs
const config = {
  nextjs: 'https://bbylink.vercel.app', // URL Vercel en production
  flask: 'https://bear-enhanced-mutt.ngrok-free.app' // URL ngrok du Raspberry Pi
}

// Test de l'API Next.js pour cr√©er une nouvelle partie
async function testNewGameAPI() {
  console.log('üß™ Test de l\'API nouvelle partie...');
  
  try {
    // 1. Cr√©er une partie initiale
    const createRes = await fetch(`${config.nextjs}/api/games`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        hostId: 1,
        tableId: 1,
        gameMode: '1v1',
        winCondition: 'first_to_goals',
        winValue: 10
      })
    });
    
    if (!createRes.ok) {
      throw new Error('Erreur cr√©ation partie initiale');
    }
    
    const gameData = await createRes.json();
    const gameCode = gameData.game.code;
    console.log('‚úÖ Partie initiale cr√©√©e:', gameCode);
    
    // 2. Cr√©er une nouvelle partie avec un nouveau code
    const newGameRes = await fetch(`${config.nextjs}/api/games/${gameCode}`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        action: 'new_game',
        userId: 1
      })
    });
    
    if (!newGameRes.ok) {
      throw new Error('Erreur cr√©ation nouvelle partie');
    }
    
    const newGameData = await newGameRes.json();
    console.log('‚úÖ Nouvelle partie cr√©√©e:', newGameData.game.code);
    console.log('üìä Nouvelle partie ID:', newGameData.game.id);
    console.log('üìä Ancienne partie ID:', gameData.game.id);
    
    // V√©rifier que c'est bien une nouvelle partie (ID diff√©rent ET code diff√©rent)
    if (newGameData.game.id === gameData.game.id) {
      throw new Error('ERREUR: M√™me ID pour la nouvelle partie');
    }
    
    if (newGameData.game.code === gameData.game.code) {
      throw new Error('ERREUR: M√™me code pour la nouvelle partie (contrainte unique)');
    }
    
    console.log('‚úÖ Test r√©ussi: Nouvelle partie avec ID et code diff√©rents');
    
  } catch (error) {
    console.error('‚ùå Test √©chou√©:', error.message);
  }
}

// Test du reset Flask
async function testFlaskReset() {
  console.log('üß™ Test du reset Flask...');
  
  try {
    const resetRes = await fetch(`${config.flask}/api/games/TEST123/reset-score`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        user_id: 1
      })
    });
    
    if (resetRes.ok) {
      console.log('‚úÖ Reset Flask fonctionne');
    } else {
      console.log('‚ö†Ô∏è Reset Flask √©chou√© (normal si partie inexistante)');
    }
    
  } catch (error) {
    console.log('‚ö†Ô∏è Flask non accessible:', error.message);
  }
}

// Ex√©cuter les tests
async function runTests() {
  console.log('üöÄ D√©marrage des tests...');
  console.log(`üì° URLs utilis√©es:`);
  console.log(`  - Next.js: ${config.nextjs}`);
  console.log(`  - Flask: ${config.flask}`);
  
  await testNewGameAPI();
  await testFlaskReset();
  
  console.log('üèÅ Tests termin√©s');
}

// Ex√©cuter si appel√© directement
if (typeof window === 'undefined') {
  runTests();
} 